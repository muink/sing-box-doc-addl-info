{
	"inbounds": [
		{
			"type": "direct",
			"tag": "direct-in",
			// 覆写入站连接的目的地地址
			// Overwrite the destination address for inbound connections
			"override_address": "1.0.0.1",
			// 覆写入站连接的目的地端口
			// Overwrite the destination port for inbound connections
			"override_port": 53
		},
		{
			"type": "mixed",
			"tag": "mixed-in",
			// Only supported on Linux, Android, Windows, and macOS.
			// 启动时自动设置系统代理, 停止时自动清理
			// Automatically set system proxy configuration when start and clean up when stop.
			// 要在无特权的 Android 和 iOS 上工作, 请改用 tun.platform.http_proxy
			// To work on Android and Apple platforms without privileges, use tun.platform.http_proxy instead.
			"set_system_proxy": false
		},
		{
			"type": "redirect",
			"tag": "redirect-in"
			// Only supported on Linux and macOS.
		},
		{
			"type": "tproxy",
			"tag": "tproxy-in",
			"network": "udp"
			// Only supported on Linux.
		},
		{
			"type": "tun",
			"tag": "tun-in",
			"interface_name": "tun0",
			// tun 接口的 IPv4 与 IPv6 前缀地址
			// IPv4 and IPv6 prefix address for the tun interface.
			"address": [
				"172.18.0.1/30",
				"fdfe:dcba:9876::1/126"
			],
			"mtu": 9000,
			// 仅在启用了 `auto_route` 的 Linux 上受支持
			// Only supported on Linux with `auto_route` enabled.
			// 启用通用分段卸载
			// Enable generic segmentation offload.
			"gso": false,
			// 设置到 Tun 的默认路由. 让所有流量进入 Tun
			// Set the default route to the Tun. Let all traffic to Tun.
			// 为避免流量环回, 请设置 `route.auto_detect_interface` 或 `route.default_interface` 或 `outbound.bind_interface`
			// To avoid traffic loopback, set `route.auto_detect_interface` or `route.default_interface` or `outbound.bind_interface`
			// 与 Android VPN 一起使用: VPN 默认优先于 tun. 要使 tun 经过 VPN，启用 `route.override_android_vpn`
			// Use with Android VPN: By default, VPN takes precedence over tun. To make tun go through VPN, enable `route.override_android_vpn`.
			"auto_route": true,
			// `auto_route` 生成的 iproute2 路由表索引. 默认使用 `2022`
			// Linux iproute2 table index generated by `auto_route`. `2022` is used by default.
			//
			// The table index is TABLE_ID := [ local | main | default | NUMBER ]
			// Command `ip route list tab 2022`
			"iproute2_table_index": 2022,
			// `auto_route` 生成的 iproute2 规则起始索引. 默认使用 `9000`
			// Linux iproute2 rule start index generated by `auto_route`. `9000` is used by default.
			//
			// The index is rule priority [ pref NUMBER ]
			// Command `ip rule list [pref|prio] 9000`
			"iproute2_rule_index": 9000,
			// 仅在启用了 `auto_route` 的 Linux 上受支持
			// Only supported on Linux with `auto_route` enabled.
			// 自动配置 iptables/nftables 以重定向连接
			// Automatically configure iptables/nftables to redirect connections.
			// In Android:
			// 仅转发本地连接. 要通过热点或中继共享您的 VPN 连接, 请使用 `VPNHotspot`
			// Only local connections are forwarded. To share your VPN connection over hotspot or repeater, use `VPNHotspot`.
			// In Linux:
			// 带有 `auto_redirect` 的 `auto_route` 现在可以在路由器上按预期工作, 无需干预
			// `auto_route` with `auto_redirect` now works as expected on routers without intervention.
			"auto_redirect": false,
			// `route_address_set` 和 `route_exclude_address_set` 使用的连接输入标记. 默认使用 `0x2023`
			// Connection input mark used by `route_address_set` and `route_exclude_address_set`. `0x2023` is used by default.
			//
			// The input mark is nftables fwmark
			// Command `nft ip daddr ? counter mark set 0x2023`
			// nft: fwmark 0x2023 route2 TUN
			"auto_redirect_input_mark": "0x2023",
			// `route_address_set` 和 `route_exclude_address_set` 使用的连接输出标记. 默认使用 `0x2024`
			// Connection output mark used by `route_address_set` and `route_exclude_address_set`. `0x2024` is used by default.
			//
			// The output mark is nftables fwmark
			// Command `nft ip daddr ? counter mark set 0x2024`
			// nft: fwmark 0x2024 route2 return
			"auto_redirect_output_mark": "0x2024",
			// 启用 `auto_route` 时执行严格的路由规则
			// Enforce strict routing rules when `auto_route` is enabled.
			// 详情查看 sing-box 文档
			// See sing-box documentation for details
			"strict_route": true,
			// 启用 `auto_route` 时, 设置到 Tun 的自定义路由而不是使用预设路由
			// Use custom routes instead of default when `auto_route` is enabled.
			"route_address": [
				"0.0.0.0/1",
				"128.0.0.0/1",
				"::/1",
				"8000::/1"
			],
			// 启用 `auto_route` 时, 设置绕过 Tun 的排除自定义路由
			// Exclude custom routes when `auto_route` is enabled.
			"route_exclude_address": [
				"192.168.0.0/16",
				"fc00::/7"
			],
			// 仅支持 Linux, 且需要 nftables, `auto_route` 和 `auto_redirect` 已启用
			// 与 `route.default_mark` 和 `[dialOptions].routing_mark` 冲突
			// Only supported on Linux with nftables and requires `auto_route` and `auto_redirect` enabled.
			// Conflict with `route.default_mark` and `[dialOptions].routing_mark`
			// 将指定规则集中的目标 IP CIDR 规则添加到防火墙. 不匹配的流量将绕过 sing-box 路由
			// Add the destination IP CIDR rules in the specified rule-sets to the firewall.
			// Unmatched traffic will bypass the sing-box routes.
			"route_address_set": [
				"geoip-cloudflare"
			],
			// 仅支持 Linux, 且需要 nftables, `auto_route` 和 `auto_redirect` 已启用
			// 与 `route.default_mark` 和 `[dialOptions].routing_mark` 冲突
			// Only supported on Linux with nftables and requires `auto_route` and `auto_redirect` enabled.
			// Conflict with `route.default_mark` and `[dialOptions].routing_mark`
			// 将指定规则集中的目标 IP CIDR 规则添加到防火墙. 匹配的流量将绕过 sing-box 路由
			// Add the destination IP CIDR rules in the specified rule-sets to the firewall.
			// Matched traffic will bypass the sing-box routes.
			"route_exclude_address_set": [
				"geoip-cn"
			],
			// This item is only available on the gvisor and mixed stack, other stacks are endpoint-independent NAT by default.
			"endpoint_independent_nat": false,
			// UDP NAT 老化时间, 以秒为单位, 默认为 300 (5 分钟)
			// UDP NAT expiration time in seconds, default is 300 (5 minutes).
			// 可以使用 natter 或 natmap 这类的 stun 打洞软件检查您当前网络的 UDP NAT 老化时间
			// You can use stun hole punching software such as natter or natmap to check the UDP NAT aging time of your current network.
			"udp_timeout": "5m",
			// `system` or `gvisor` or `mixed`
			// mixed:	Mixed `system` TCP stack and `gvisor` UDP stack
			"stack": "system",
			// 接口规则仅在 Linux 下被支持, 并且需要 `auto_route`
			// 与 `exclude_interface` 冲突
			// Interface rules are only supported on Linux and require `auto_route`.
			// Conflict with `exclude_interface`.
			// 限制被路由的接口. 默认不限制
			// Limit interfaces in route. Not limited by default.
			"include_interface": [
				"lan0"
			],
			// 当 `strict_route` 启用, 到被排除接口的回程流量将不会被自动排除, 因此也要添加它们（例: `br-lan` 与 `pppoe-wan`）
			// 与 `include_interface` 冲突
			// When `strict_route` enabled, return traffic to excluded interfaces will not be automatically excluded, so add them as well (example: `br-lan` and `pppoe-wan`).
			// Conflict with `include_interface`.
			// 排除路由的接口
			// Exclude interfaces in route.
			"exclude_interface": [
				"lan1"
			],
			"include_uid": [
				0
			],
			"include_uid_range": [
				"1000-99999"
			],
			"exclude_uid": [
				1000
			],
			"exclude_uid_range": [
				"1000-99999"
			],
			"include_android_user": [
				0,
				10
			],
			"include_package": [
				"com.android.chrome"
			],
			"exclude_package": [
				"com.android.captiveportallogin"
			],
			// 平台特定的设置, 由客户端应用提供 (sing-box 自家的图形化客户端)
			// Platform-specific settings, provided by client applications.
			"platform": {
				// 系统 HTTP 代理设置
				// System HTTP proxy settings.
				"http_proxy": {
					"enabled": false,
					"server": "127.0.0.1",
					"server_port": 8080,
					// 详情查看 sing-box 文档
					// See sing-box documentation for details
					"bypass_domain": [],
					// 详情查看 sing-box 文档
					// See sing-box documentation for details
					"match_domain": []
				}
			}
			// Only supported on Linux, Windows and macOS.
		}
	]
}
